/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.31.1
 * source: proto/videos.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace videos {
    export enum Visibility {
        Public = 0,
        Unlisted = 1,
        Private = 2
    }
    export enum Stage {
        NotUploaded = 0,
        AwaitingProcessing = 1,
        Processing = 2,
        Processed = 3
    }
    export class VideosGetStageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: string;
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get session() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: string;
            id?: number;
        }): VideosGetStageRequest {
            const message = new VideosGetStageRequest({});
            if (data.session != null) {
                message.session = data.session;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: string;
                id?: number;
            } = {};
            if (this.session != null) {
                data.session = this.session;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session.length)
                writer.writeString(1, this.session);
            if (this.id != 0)
                writer.writeInt64(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideosGetStageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideosGetStageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideosGetStageRequest {
            return VideosGetStageRequest.deserialize(bytes);
        }
    }
    export class VideosGetStageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stage?: Stage;
            upload_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stage" in data && data.stage != undefined) {
                    this.stage = data.stage;
                }
                if ("upload_id" in data && data.upload_id != undefined) {
                    this.upload_id = data.upload_id;
                }
            }
        }
        get stage() {
            return pb_1.Message.getFieldWithDefault(this, 1, Stage.NotUploaded) as Stage;
        }
        set stage(value: Stage) {
            pb_1.Message.setField(this, 1, value);
        }
        get upload_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set upload_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            stage?: Stage;
            upload_id?: number;
        }): VideosGetStageResponse {
            const message = new VideosGetStageResponse({});
            if (data.stage != null) {
                message.stage = data.stage;
            }
            if (data.upload_id != null) {
                message.upload_id = data.upload_id;
            }
            return message;
        }
        toObject() {
            const data: {
                stage?: Stage;
                upload_id?: number;
            } = {};
            if (this.stage != null) {
                data.stage = this.stage;
            }
            if (this.upload_id != null) {
                data.upload_id = this.upload_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stage != Stage.NotUploaded)
                writer.writeEnum(1, this.stage);
            if (this.upload_id != 0)
                writer.writeInt64(2, this.upload_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideosGetStageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideosGetStageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stage = reader.readEnum();
                        break;
                    case 2:
                        message.upload_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideosGetStageResponse {
            return VideosGetStageResponse.deserialize(bytes);
        }
    }
    export class CreateUploadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
            }
        }
        get session() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            session?: string;
        }): CreateUploadRequest {
            const message = new CreateUploadRequest({});
            if (data.session != null) {
                message.session = data.session;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session.length)
                writer.writeString(1, this.session);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUploadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUploadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUploadRequest {
            return CreateUploadRequest.deserialize(bytes);
        }
    }
    export class CreateUploadResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            url?: string;
            form_data?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("form_data" in data && data.form_data != undefined) {
                    this.form_data = data.form_data;
                }
            }
            if (!this.form_data)
                this.form_data = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get form_data() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set form_data(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            id?: string;
            url?: string;
            form_data?: {
                [key: string]: string;
            };
        }): CreateUploadResponse {
            const message = new CreateUploadResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (typeof data.form_data == "object") {
                message.form_data = new Map(Object.entries(data.form_data));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                url?: string;
                form_data?: {
                    [key: string]: string;
                };
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.form_data != null) {
                data.form_data = (Object.fromEntries)(this.form_data);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeInt64String(1, this.id);
            if (this.url.length)
                writer.writeString(2, this.url);
            for (const [key, value] of this.form_data) {
                writer.writeMessage(3, this.form_data, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUploadResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUploadResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64String();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.form_data as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUploadResponse {
            return CreateUploadResponse.deserialize(bytes);
        }
    }
    export class VideosCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: string;
            upload_id?: string;
            thumbnail_id?: string;
            title?: string;
            description?: string;
            visibility?: Visibility;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("upload_id" in data && data.upload_id != undefined) {
                    this.upload_id = data.upload_id;
                }
                if ("thumbnail_id" in data && data.thumbnail_id != undefined) {
                    this.thumbnail_id = data.thumbnail_id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("visibility" in data && data.visibility != undefined) {
                    this.visibility = data.visibility;
                }
            }
        }
        get session() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get upload_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set upload_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get thumbnail_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set thumbnail_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get visibility() {
            return pb_1.Message.getFieldWithDefault(this, 7, Visibility.Public) as Visibility;
        }
        set visibility(value: Visibility) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            session?: string;
            upload_id?: string;
            thumbnail_id?: string;
            title?: string;
            description?: string;
            visibility?: Visibility;
        }): VideosCreateRequest {
            const message = new VideosCreateRequest({});
            if (data.session != null) {
                message.session = data.session;
            }
            if (data.upload_id != null) {
                message.upload_id = data.upload_id;
            }
            if (data.thumbnail_id != null) {
                message.thumbnail_id = data.thumbnail_id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.visibility != null) {
                message.visibility = data.visibility;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: string;
                upload_id?: string;
                thumbnail_id?: string;
                title?: string;
                description?: string;
                visibility?: Visibility;
            } = {};
            if (this.session != null) {
                data.session = this.session;
            }
            if (this.upload_id != null) {
                data.upload_id = this.upload_id;
            }
            if (this.thumbnail_id != null) {
                data.thumbnail_id = this.thumbnail_id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.visibility != null) {
                data.visibility = this.visibility;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session.length)
                writer.writeString(1, this.session);
            if (this.upload_id != "0")
                writer.writeInt64String(2, this.upload_id);
            if (this.thumbnail_id != "0")
                writer.writeInt64String(3, this.thumbnail_id);
            if (this.title.length)
                writer.writeString(5, this.title);
            if (this.description.length)
                writer.writeString(6, this.description);
            if (this.visibility != Visibility.Public)
                writer.writeEnum(7, this.visibility);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideosCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideosCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session = reader.readString();
                        break;
                    case 2:
                        message.upload_id = reader.readInt64String();
                        break;
                    case 3:
                        message.thumbnail_id = reader.readInt64String();
                        break;
                    case 5:
                        message.title = reader.readString();
                        break;
                    case 6:
                        message.description = reader.readString();
                        break;
                    case 7:
                        message.visibility = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideosCreateRequest {
            return VideosCreateRequest.deserialize(bytes);
        }
    }
    export class VideosCreateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): VideosCreateResponse {
            const message = new VideosCreateResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideosCreateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideosCreateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideosCreateResponse {
            return VideosCreateResponse.deserialize(bytes);
        }
    }
    export class GetUserVideosRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
            }
        }
        get session() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            session?: string;
        }): GetUserVideosRequest {
            const message = new GetUserVideosRequest({});
            if (data.session != null) {
                message.session = data.session;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: string;
            } = {};
            if (this.session != null) {
                data.session = this.session;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session.length)
                writer.writeString(1, this.session);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserVideosRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserVideosRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserVideosRequest {
            return GetUserVideosRequest.deserialize(bytes);
        }
    }
    export class GetUserVideosResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            videos?: GetUserVideosResponseVideo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("videos" in data && data.videos != undefined) {
                    this.videos = data.videos;
                }
            }
        }
        get videos() {
            return pb_1.Message.getRepeatedWrapperField(this, GetUserVideosResponseVideo, 1) as GetUserVideosResponseVideo[];
        }
        set videos(value: GetUserVideosResponseVideo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            videos?: ReturnType<typeof GetUserVideosResponseVideo.prototype.toObject>[];
        }): GetUserVideosResponse {
            const message = new GetUserVideosResponse({});
            if (data.videos != null) {
                message.videos = data.videos.map(item => GetUserVideosResponseVideo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                videos?: ReturnType<typeof GetUserVideosResponseVideo.prototype.toObject>[];
            } = {};
            if (this.videos != null) {
                data.videos = this.videos.map((item: GetUserVideosResponseVideo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.videos.length)
                writer.writeRepeatedMessage(1, this.videos, (item: GetUserVideosResponseVideo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserVideosResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserVideosResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.videos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetUserVideosResponseVideo.deserialize(reader), GetUserVideosResponseVideo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserVideosResponse {
            return GetUserVideosResponse.deserialize(bytes);
        }
    }
    export class GetUserVideosResponseVideo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            title?: string;
            visibility?: Visibility;
            created_at?: number;
            thumbnail_id?: string;
            stage?: Stage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("visibility" in data && data.visibility != undefined) {
                    this.visibility = data.visibility;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("thumbnail_id" in data && data.thumbnail_id != undefined) {
                    this.thumbnail_id = data.thumbnail_id;
                }
                if ("stage" in data && data.stage != undefined) {
                    this.stage = data.stage;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get visibility() {
            return pb_1.Message.getFieldWithDefault(this, 3, Visibility.Public) as Visibility;
        }
        set visibility(value: Visibility) {
            pb_1.Message.setField(this, 3, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get thumbnail_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set thumbnail_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get stage() {
            return pb_1.Message.getFieldWithDefault(this, 6, Stage.NotUploaded) as Stage;
        }
        set stage(value: Stage) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            visibility?: Visibility;
            created_at?: number;
            thumbnail_id?: string;
            stage?: Stage;
        }): GetUserVideosResponseVideo {
            const message = new GetUserVideosResponseVideo({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.visibility != null) {
                message.visibility = data.visibility;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.thumbnail_id != null) {
                message.thumbnail_id = data.thumbnail_id;
            }
            if (data.stage != null) {
                message.stage = data.stage;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                visibility?: Visibility;
                created_at?: number;
                thumbnail_id?: string;
                stage?: Stage;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.visibility != null) {
                data.visibility = this.visibility;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.thumbnail_id != null) {
                data.thumbnail_id = this.thumbnail_id;
            }
            if (this.stage != null) {
                data.stage = this.stage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeInt64String(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.visibility != Visibility.Public)
                writer.writeEnum(3, this.visibility);
            if (this.created_at != 0)
                writer.writeInt64(4, this.created_at);
            if (this.thumbnail_id != "0")
                writer.writeInt64String(5, this.thumbnail_id);
            if (this.stage != Stage.NotUploaded)
                writer.writeEnum(6, this.stage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserVideosResponseVideo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserVideosResponseVideo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64String();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.visibility = reader.readEnum();
                        break;
                    case 4:
                        message.created_at = reader.readInt64();
                        break;
                    case 5:
                        message.thumbnail_id = reader.readInt64String();
                        break;
                    case 6:
                        message.stage = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserVideosResponseVideo {
            return GetUserVideosResponseVideo.deserialize(bytes);
        }
    }
    export class DeleteVideoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: string;
            video_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("video_id" in data && data.video_id != undefined) {
                    this.video_id = data.video_id;
                }
            }
        }
        get session() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get video_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set video_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: string;
            video_id?: number;
        }): DeleteVideoRequest {
            const message = new DeleteVideoRequest({});
            if (data.session != null) {
                message.session = data.session;
            }
            if (data.video_id != null) {
                message.video_id = data.video_id;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: string;
                video_id?: number;
            } = {};
            if (this.session != null) {
                data.session = this.session;
            }
            if (this.video_id != null) {
                data.video_id = this.video_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session.length)
                writer.writeString(1, this.session);
            if (this.video_id != 0)
                writer.writeInt64(2, this.video_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteVideoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteVideoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session = reader.readString();
                        break;
                    case 2:
                        message.video_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteVideoRequest {
            return DeleteVideoRequest.deserialize(bytes);
        }
    }
    export class DeleteVideoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteVideoResponse {
            const message = new DeleteVideoResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteVideoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteVideoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteVideoResponse {
            return DeleteVideoResponse.deserialize(bytes);
        }
    }
    export class ThumbnailsProcessRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: string;
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get session() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: string;
            id?: number;
        }): ThumbnailsProcessRequest {
            const message = new ThumbnailsProcessRequest({});
            if (data.session != null) {
                message.session = data.session;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: string;
                id?: number;
            } = {};
            if (this.session != null) {
                data.session = this.session;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session.length)
                writer.writeString(1, this.session);
            if (this.id != 0)
                writer.writeInt64(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ThumbnailsProcessRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ThumbnailsProcessRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ThumbnailsProcessRequest {
            return ThumbnailsProcessRequest.deserialize(bytes);
        }
    }
    export class ThumbnailsProcessResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ThumbnailsProcessResponse {
            const message = new ThumbnailsProcessResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ThumbnailsProcessResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ThumbnailsProcessResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ThumbnailsProcessResponse {
            return ThumbnailsProcessResponse.deserialize(bytes);
        }
    }
    export class GetVideoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session?: string;
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session" in data && data.session != undefined) {
                    this.session = data.session;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get session() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            session?: string;
            id?: number;
        }): GetVideoRequest {
            const message = new GetVideoRequest({});
            if (data.session != null) {
                message.session = data.session;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                session?: string;
                id?: number;
            } = {};
            if (this.session != null) {
                data.session = this.session;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session.length)
                writer.writeString(1, this.session);
            if (this.id != 0)
                writer.writeInt64(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVideoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVideoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVideoRequest {
            return GetVideoRequest.deserialize(bytes);
        }
    }
    export class GetVideoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            title?: string;
            visibility?: Visibility;
            created_at?: number;
            thumbnail_id?: string;
            upload_id?: string;
            user_id?: string;
            stage?: Stage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("visibility" in data && data.visibility != undefined) {
                    this.visibility = data.visibility;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("thumbnail_id" in data && data.thumbnail_id != undefined) {
                    this.thumbnail_id = data.thumbnail_id;
                }
                if ("upload_id" in data && data.upload_id != undefined) {
                    this.upload_id = data.upload_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("stage" in data && data.stage != undefined) {
                    this.stage = data.stage;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get visibility() {
            return pb_1.Message.getFieldWithDefault(this, 3, Visibility.Public) as Visibility;
        }
        set visibility(value: Visibility) {
            pb_1.Message.setField(this, 3, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get thumbnail_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set thumbnail_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get upload_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "0") as string;
        }
        set upload_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "0") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get stage() {
            return pb_1.Message.getFieldWithDefault(this, 8, Stage.NotUploaded) as Stage;
        }
        set stage(value: Stage) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            visibility?: Visibility;
            created_at?: number;
            thumbnail_id?: string;
            upload_id?: string;
            user_id?: string;
            stage?: Stage;
        }): GetVideoResponse {
            const message = new GetVideoResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.visibility != null) {
                message.visibility = data.visibility;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.thumbnail_id != null) {
                message.thumbnail_id = data.thumbnail_id;
            }
            if (data.upload_id != null) {
                message.upload_id = data.upload_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.stage != null) {
                message.stage = data.stage;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                visibility?: Visibility;
                created_at?: number;
                thumbnail_id?: string;
                upload_id?: string;
                user_id?: string;
                stage?: Stage;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.visibility != null) {
                data.visibility = this.visibility;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.thumbnail_id != null) {
                data.thumbnail_id = this.thumbnail_id;
            }
            if (this.upload_id != null) {
                data.upload_id = this.upload_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.stage != null) {
                data.stage = this.stage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != "0")
                writer.writeInt64String(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.visibility != Visibility.Public)
                writer.writeEnum(3, this.visibility);
            if (this.created_at != 0)
                writer.writeInt64(4, this.created_at);
            if (this.thumbnail_id != "0")
                writer.writeInt64String(5, this.thumbnail_id);
            if (this.upload_id != "0")
                writer.writeInt64String(6, this.upload_id);
            if (this.user_id != "0")
                writer.writeInt64String(7, this.user_id);
            if (this.stage != Stage.NotUploaded)
                writer.writeEnum(8, this.stage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVideoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVideoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64String();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.visibility = reader.readEnum();
                        break;
                    case 4:
                        message.created_at = reader.readInt64();
                        break;
                    case 5:
                        message.thumbnail_id = reader.readInt64String();
                        break;
                    case 6:
                        message.upload_id = reader.readInt64String();
                        break;
                    case 7:
                        message.user_id = reader.readInt64String();
                        break;
                    case 8:
                        message.stage = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVideoResponse {
            return GetVideoResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedVideosService {
        static definition = {
            CreateUpload: {
                path: "/videos.Videos/CreateUpload",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateUploadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateUploadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateUploadResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateUploadResponse.deserialize(new Uint8Array(bytes))
            },
            Create: {
                path: "/videos.Videos/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VideosCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VideosCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VideosCreateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VideosCreateResponse.deserialize(new Uint8Array(bytes))
            },
            GetUserVideos: {
                path: "/videos.Videos/GetUserVideos",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserVideosRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserVideosRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUserVideosResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUserVideosResponse.deserialize(new Uint8Array(bytes))
            },
            Get: {
                path: "/videos.Videos/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetVideoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetVideoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVideoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVideoResponse.deserialize(new Uint8Array(bytes))
            },
            GetStage: {
                path: "/videos.Videos/GetStage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VideosGetStageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VideosGetStageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VideosGetStageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VideosGetStageResponse.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/videos.Videos/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteVideoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteVideoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteVideoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteVideoResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateUpload(call: grpc_1.ServerUnaryCall<CreateUploadRequest, CreateUploadResponse>, callback: grpc_1.sendUnaryData<CreateUploadResponse>): void;
        abstract Create(call: grpc_1.ServerUnaryCall<VideosCreateRequest, VideosCreateResponse>, callback: grpc_1.sendUnaryData<VideosCreateResponse>): void;
        abstract GetUserVideos(call: grpc_1.ServerUnaryCall<GetUserVideosRequest, GetUserVideosResponse>, callback: grpc_1.sendUnaryData<GetUserVideosResponse>): void;
        abstract Get(call: grpc_1.ServerUnaryCall<GetVideoRequest, GetVideoResponse>, callback: grpc_1.sendUnaryData<GetVideoResponse>): void;
        abstract GetStage(call: grpc_1.ServerUnaryCall<VideosGetStageRequest, VideosGetStageResponse>, callback: grpc_1.sendUnaryData<VideosGetStageResponse>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<DeleteVideoRequest, DeleteVideoResponse>, callback: grpc_1.sendUnaryData<DeleteVideoResponse>): void;
    }
    export class VideosClient extends grpc_1.makeGenericClientConstructor(UnimplementedVideosService.definition, "Videos", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateUpload: GrpcPromiseServiceInterface<CreateUploadRequest, CreateUploadResponse> = (message: CreateUploadRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<CreateUploadResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.CreateUpload(message, metadata, options, (error: grpc_1.ServiceError, response: CreateUploadResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        Create: GrpcPromiseServiceInterface<VideosCreateRequest, VideosCreateResponse> = (message: VideosCreateRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<VideosCreateResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.Create(message, metadata, options, (error: grpc_1.ServiceError, response: VideosCreateResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        GetUserVideos: GrpcPromiseServiceInterface<GetUserVideosRequest, GetUserVideosResponse> = (message: GetUserVideosRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetUserVideosResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.GetUserVideos(message, metadata, options, (error: grpc_1.ServiceError, response: GetUserVideosResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        Get: GrpcPromiseServiceInterface<GetVideoRequest, GetVideoResponse> = (message: GetVideoRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetVideoResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.Get(message, metadata, options, (error: grpc_1.ServiceError, response: GetVideoResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        GetStage: GrpcPromiseServiceInterface<VideosGetStageRequest, VideosGetStageResponse> = (message: VideosGetStageRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<VideosGetStageResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.GetStage(message, metadata, options, (error: grpc_1.ServiceError, response: VideosGetStageResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        Delete: GrpcPromiseServiceInterface<DeleteVideoRequest, DeleteVideoResponse> = (message: DeleteVideoRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<DeleteVideoResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.Delete(message, metadata, options, (error: grpc_1.ServiceError, response: DeleteVideoResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
    }
    export abstract class UnimplementedThumbnailsService {
        static definition = {
            CreateUpload: {
                path: "/videos.Thumbnails/CreateUpload",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateUploadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateUploadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateUploadResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateUploadResponse.deserialize(new Uint8Array(bytes))
            },
            Process: {
                path: "/videos.Thumbnails/Process",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ThumbnailsProcessRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ThumbnailsProcessRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ThumbnailsProcessResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ThumbnailsProcessResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateUpload(call: grpc_1.ServerUnaryCall<CreateUploadRequest, CreateUploadResponse>, callback: grpc_1.sendUnaryData<CreateUploadResponse>): void;
        abstract Process(call: grpc_1.ServerUnaryCall<ThumbnailsProcessRequest, ThumbnailsProcessResponse>, callback: grpc_1.sendUnaryData<ThumbnailsProcessResponse>): void;
    }
    export class ThumbnailsClient extends grpc_1.makeGenericClientConstructor(UnimplementedThumbnailsService.definition, "Thumbnails", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateUpload: GrpcPromiseServiceInterface<CreateUploadRequest, CreateUploadResponse> = (message: CreateUploadRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<CreateUploadResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.CreateUpload(message, metadata, options, (error: grpc_1.ServiceError, response: CreateUploadResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        Process: GrpcPromiseServiceInterface<ThumbnailsProcessRequest, ThumbnailsProcessResponse> = (message: ThumbnailsProcessRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ThumbnailsProcessResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.Process(message, metadata, options, (error: grpc_1.ServiceError, response: ThumbnailsProcessResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
    }
}
