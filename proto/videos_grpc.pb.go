// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/videos.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Videos_CreateUpload_FullMethodName  = "/videos.Videos/CreateUpload"
	Videos_Create_FullMethodName        = "/videos.Videos/Create"
	Videos_GetUserVideos_FullMethodName = "/videos.Videos/GetUserVideos"
	Videos_Get_FullMethodName           = "/videos.Videos/Get"
	Videos_GetStage_FullMethodName      = "/videos.Videos/GetStage"
	Videos_Delete_FullMethodName        = "/videos.Videos/Delete"
)

// VideosClient is the client API for Videos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideosClient interface {
	CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error)
	Create(ctx context.Context, in *VideosCreateRequest, opts ...grpc.CallOption) (*VideosCreateResponse, error)
	GetUserVideos(ctx context.Context, in *GetUserVideosRequest, opts ...grpc.CallOption) (*GetUserVideosResponse, error)
	Get(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error)
	GetStage(ctx context.Context, in *VideosGetStageRequest, opts ...grpc.CallOption) (*VideosGetStageResponse, error)
	Delete(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error)
}

type videosClient struct {
	cc grpc.ClientConnInterface
}

func NewVideosClient(cc grpc.ClientConnInterface) VideosClient {
	return &videosClient{cc}
}

func (c *videosClient) CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUploadResponse)
	err := c.cc.Invoke(ctx, Videos_CreateUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videosClient) Create(ctx context.Context, in *VideosCreateRequest, opts ...grpc.CallOption) (*VideosCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideosCreateResponse)
	err := c.cc.Invoke(ctx, Videos_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videosClient) GetUserVideos(ctx context.Context, in *GetUserVideosRequest, opts ...grpc.CallOption) (*GetUserVideosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserVideosResponse)
	err := c.cc.Invoke(ctx, Videos_GetUserVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videosClient) Get(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoResponse)
	err := c.cc.Invoke(ctx, Videos_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videosClient) GetStage(ctx context.Context, in *VideosGetStageRequest, opts ...grpc.CallOption) (*VideosGetStageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideosGetStageResponse)
	err := c.cc.Invoke(ctx, Videos_GetStage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videosClient) Delete(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVideoResponse)
	err := c.cc.Invoke(ctx, Videos_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideosServer is the server API for Videos service.
// All implementations must embed UnimplementedVideosServer
// for forward compatibility.
type VideosServer interface {
	CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error)
	Create(context.Context, *VideosCreateRequest) (*VideosCreateResponse, error)
	GetUserVideos(context.Context, *GetUserVideosRequest) (*GetUserVideosResponse, error)
	Get(context.Context, *GetVideoRequest) (*GetVideoResponse, error)
	GetStage(context.Context, *VideosGetStageRequest) (*VideosGetStageResponse, error)
	Delete(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error)
	mustEmbedUnimplementedVideosServer()
}

// UnimplementedVideosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideosServer struct{}

func (UnimplementedVideosServer) CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpload not implemented")
}
func (UnimplementedVideosServer) Create(context.Context, *VideosCreateRequest) (*VideosCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVideosServer) GetUserVideos(context.Context, *GetUserVideosRequest) (*GetUserVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVideos not implemented")
}
func (UnimplementedVideosServer) Get(context.Context, *GetVideoRequest) (*GetVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVideosServer) GetStage(context.Context, *VideosGetStageRequest) (*VideosGetStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStage not implemented")
}
func (UnimplementedVideosServer) Delete(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVideosServer) mustEmbedUnimplementedVideosServer() {}
func (UnimplementedVideosServer) testEmbeddedByValue()                {}

// UnsafeVideosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideosServer will
// result in compilation errors.
type UnsafeVideosServer interface {
	mustEmbedUnimplementedVideosServer()
}

func RegisterVideosServer(s grpc.ServiceRegistrar, srv VideosServer) {
	// If the following call pancis, it indicates UnimplementedVideosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Videos_ServiceDesc, srv)
}

func _Videos_CreateUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosServer).CreateUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videos_CreateUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosServer).CreateUpload(ctx, req.(*CreateUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videos_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideosCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videos_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosServer).Create(ctx, req.(*VideosCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videos_GetUserVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosServer).GetUserVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videos_GetUserVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosServer).GetUserVideos(ctx, req.(*GetUserVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videos_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videos_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosServer).Get(ctx, req.(*GetVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videos_GetStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideosGetStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosServer).GetStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videos_GetStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosServer).GetStage(ctx, req.(*VideosGetStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videos_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideosServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videos_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideosServer).Delete(ctx, req.(*DeleteVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Videos_ServiceDesc is the grpc.ServiceDesc for Videos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Videos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videos.Videos",
	HandlerType: (*VideosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUpload",
			Handler:    _Videos_CreateUpload_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Videos_Create_Handler,
		},
		{
			MethodName: "GetUserVideos",
			Handler:    _Videos_GetUserVideos_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Videos_Get_Handler,
		},
		{
			MethodName: "GetStage",
			Handler:    _Videos_GetStage_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Videos_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/videos.proto",
}

const (
	Thumbnails_CreateUpload_FullMethodName = "/videos.Thumbnails/CreateUpload"
	Thumbnails_Process_FullMethodName      = "/videos.Thumbnails/Process"
)

// ThumbnailsClient is the client API for Thumbnails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThumbnailsClient interface {
	CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error)
	Process(ctx context.Context, in *ThumbnailsProcessRequest, opts ...grpc.CallOption) (*ThumbnailsProcessResponse, error)
}

type thumbnailsClient struct {
	cc grpc.ClientConnInterface
}

func NewThumbnailsClient(cc grpc.ClientConnInterface) ThumbnailsClient {
	return &thumbnailsClient{cc}
}

func (c *thumbnailsClient) CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUploadResponse)
	err := c.cc.Invoke(ctx, Thumbnails_CreateUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbnailsClient) Process(ctx context.Context, in *ThumbnailsProcessRequest, opts ...grpc.CallOption) (*ThumbnailsProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThumbnailsProcessResponse)
	err := c.cc.Invoke(ctx, Thumbnails_Process_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThumbnailsServer is the server API for Thumbnails service.
// All implementations must embed UnimplementedThumbnailsServer
// for forward compatibility.
type ThumbnailsServer interface {
	CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error)
	Process(context.Context, *ThumbnailsProcessRequest) (*ThumbnailsProcessResponse, error)
	mustEmbedUnimplementedThumbnailsServer()
}

// UnimplementedThumbnailsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThumbnailsServer struct{}

func (UnimplementedThumbnailsServer) CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpload not implemented")
}
func (UnimplementedThumbnailsServer) Process(context.Context, *ThumbnailsProcessRequest) (*ThumbnailsProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedThumbnailsServer) mustEmbedUnimplementedThumbnailsServer() {}
func (UnimplementedThumbnailsServer) testEmbeddedByValue()                    {}

// UnsafeThumbnailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThumbnailsServer will
// result in compilation errors.
type UnsafeThumbnailsServer interface {
	mustEmbedUnimplementedThumbnailsServer()
}

func RegisterThumbnailsServer(s grpc.ServiceRegistrar, srv ThumbnailsServer) {
	// If the following call pancis, it indicates UnimplementedThumbnailsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Thumbnails_ServiceDesc, srv)
}

func _Thumbnails_CreateUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbnailsServer).CreateUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thumbnails_CreateUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbnailsServer).CreateUpload(ctx, req.(*CreateUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thumbnails_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbnailsProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbnailsServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thumbnails_Process_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbnailsServer).Process(ctx, req.(*ThumbnailsProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Thumbnails_ServiceDesc is the grpc.ServiceDesc for Thumbnails service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thumbnails_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videos.Thumbnails",
	HandlerType: (*ThumbnailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUpload",
			Handler:    _Thumbnails_CreateUpload_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _Thumbnails_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/videos.proto",
}
