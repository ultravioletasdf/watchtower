package frontend

import (
	"fmt"
	"github.com/bwmarrin/snowflake"
	"github.com/dimmerz92/go-lucide-icons/pkg/templ/icons"
	"videoapp/internal/generated/proto"
)

// Box for commenting on a video
templ CommentBox(userId, videoId, referenceId int64, buttonTitle string, small bool) {
	if userId != 0 {
		<!-- Form creates a comment and adds to the start of the list of comments -->
		<form
			id={ fmt.Sprintf("comment_form_%d", referenceId) }
			hx-post={ fmt.Sprintf("/videos/%d/comments?reference_id=%d", videoId, referenceId) }
			hx-target="#comments"
			hx-swap="afterbegin"
			class="flex lg:w-3/4 gap-4 mt-4 items-start"
			x-data="{ comment: '' }"
			@htmx:after-request="console.log(typeof replying); if (typeof replying !== 'undefined') {console.log(reply_count);reply_count++; replying = false;} else {comment_count++}; comment = ''; if (typeof show_replies !== 'undefined') show_replies = true;"
			@keyup.escape="comment = ''; replying = false;"
		>
			{{
				avatarSize := "size-10"
				textareaClass := "w-full resize-none textarea min-h-0"
				btnClass := "btn btn-primary"
				charCountClass := "text-sm opacity-80"
				if small {
					avatarSize = "size-8"
					textareaClass += " text-xs"
					btnClass += " btn-sm"
					charCountClass += " text-xs"
				}
			}}
			@Avatar(userId, avatarSize)
			<!-- The @input attribute resize the textarea to fit the content -->
			<textarea
				x-data
				maxlength="1000"
				rows="1"
				class={ textareaClass }
				placeholder="Add a comment"
				name="comment"
				@input='$el.style.height = "";$el.style.height = $el.scrollHeight + "px"'
				@keyup.ctrl.enter={ fmt.Sprintf("if (comment.length >= 3 && comment.length <= 1000) htmx.trigger('#comment_form_%d', 'submit')", referenceId) }
				x-model="comment"
			></textarea>
			<div class="flex flex-col items-center gap-1">
				<!-- Comment Button -->
				<button class={ btnClass } disabled="true" :disabled="comment.length < 3 || comment.length > 1000">
					{ buttonTitle }
				</button>
				<!-- Character Count -->
				<div class={ charCountClass }>
					<span x-text="comment.length"></span>/1000
				</div>
			</div>
		</form>
	}
}

// Container for comments
// Loads comments after page has loaded
templ Comments(videoId int64) {
	<div
		id="comments"
		class="flex flex-col gap-2"
		hx-trigger="load"
		hx-get={ fmt.Sprintf("/videos/%d/comments?page=0", videoId) }
		hx-target="this"
		hx-swap="afterbegin"
	></div>
}

templ Comment(c *proto.Comment, userId int64) {
	{{
		avatarClass := "size-10"
		// If its a reply, make avatar and buttons smaller
		if c.ReferenceId != 0 {
			avatarClass = "size-8"
		}
	}}
	<div class="flex gap-2 w-full">
		@UserLink(c.Username) {
			@Avatar(c.UserId, avatarClass)
		}
		<div class="flex flex-col w-full" x-data={ fmt.Sprintf("{ replying: false, show_replies: false, reply_count: %d }", c.Replies) }>
			<!-- Username and time -->
			<span class="flex gap-1 text-sm">
				@UserLink(c.Username) {
					<span class="font-bold">{ c.Username }</span>
				}
				<span class="opacity-80">{ formatDate(snowflake.ParseInt64(c.Id).Time()/1000) }</span>
			</span>
			<span>{ c.Content } </span>
			<!-- Interaction row -->
			<div
				class="flex text-sm mt-2 gap-1"
				x-data={ fmt.Sprintf("{ reaction: %d, likeCount: %d, dislikeCount: %d }", c.Reaction, c.Likes, c.Dislikes) }
			>
				<!-- Like -->
				<button
					class="btn btn-sm rounded-full"
					:class="reaction == 1 && 'btn-primary'"
					if userId == 0 {
						@click="$store.showSignInModal = true"
					} else {
						@click={ fmt.Sprintf(likeScript, c.Id, c.Id) }
					}
				>
					@icons.ThumbsUp(iconSize)
					<div x-text="likeCount"></div>
				</button>
				<!-- Dislike -->
				<button
					class="btn btn-sm rounded-full"
					:class="reaction == 2 && 'btn-primary'"
					if userId == 0 {
						@click="$store.showSignInModal = true"
					} else {
						@click={ fmt.Sprintf(dislikeScript, c.Id, c.Id) }
					}
				>
					@icons.ThumbsDown(iconSize)
					<div x-text="dislikeCount"></div>
				</button>
				if c.ReferenceId == 0 {
					<!-- Reply -->
					<button
						if userId == 0 {
							@click="$store.showSignInModal = true"
						} else {
							@click="replying = true"
						}
						class="btn btn-sm rounded-full"
					>
						@icons.Reply(iconSize)
						Reply
					</button>
					<!-- 
            View Replies (shows only when there are actually replies)
            Loads replies on first hover
            Toggles replies on each click
          -->
					<button
						class="btn btn-sm rounded-full w-fit btn-info"
						hx-get={ fmt.Sprintf("/videos/%d/comments?reference_id=%d", c.VideoId, c.Id) }
						hx-target={ fmt.Sprintf("#replies_%d", c.Id) }
						hx-swap="afterbegin"
						hx-trigger="clickonce"
						@mouseover.once="htmx.trigger($el, 'clickonce')"
						@click="show_replies = !show_replies"
						x-show="reply_count > 0"
					>
						@icons.ChevronDown(icons.IconProps{Class: "size-4 rotate-0 transition", Attributes: templ.Attributes{":class": "show_replies && 'rotate-180'"}})
						<span x-text="reply_count"></span> Reply
					</button>
				}
			</div>
			<!-- Shows when the user hits reply -->
			<div x-show="replying" class="w-full flex flex-col">
				@CommentBox(userId, c.VideoId, c.Id, "Reply", true)
			</div>
			<!-- Comment replies -->
			<div id={ fmt.Sprintf("replies_%d", c.Id) } class="flex flex-col gap-2 mt-2 empty:hidden" x-show="show_replies"></div>
		</div>
	</div>
}

// Renders a list of comments
templ CommentList(response *proto.ListCommentsResponse, videoId int64, page int32, userId int64) {
	for i, comment := range response.Comments {
		<!-- Render the comment -->
		@Comment(comment, userId)
		<!-- On the last comment, load more comments -->
		if i == len(response.Comments)-1 {
			<div
				hx-trigger="intersect once"
				hx-swap="beforeend"
				hx-target="#comments"
				hx-get={ fmt.Sprintf("/videos/%d/comments?page=%d", videoId, page+1) }
			></div>
		}
	}
}

templ UserLink(username string) {
	<a href={ fmt.Sprintf("/user/%s", username) }>
		{ children... }
	</a>
}

templ UserLinkId(id int64) {
	<a href={ fmt.Sprintf("/user/id/%d", id) }>
		{ children... }
	</a>
}
