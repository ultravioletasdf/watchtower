package frontend

import (
	"fmt"
	"time"
)

templ Base() {
	<!DOCTYPE html>
	<html class="h-full">
		<head>
			<title>WatchTower</title>
			<link rel="stylesheet" href="/assets/tailwind.css"/>
			<script src="/assets/htmx.min.js" defer></script>
			<script src="/assets/alpine-persist.min.js" defer></script>
			<script src="/assets/alpine.min.js" defer></script>
		</head>
		<body class="h-full bg-base-100">
			{ children... }
			@SignInModal()
			<div class="toast toast-center" id="toasts"></div>
			<template id="globalError">
				@SoftError("")
			</template>
			<script>
        document.addEventListener('alpine:init', () => {
            Alpine.store('showSignInModal', false)
          })

			  document.body.addEventListener("htmx:responseError", function(e) {
          let error = e.detail.xhr.response;
          let toast = document.querySelector('#globalError').content.cloneNode(true)
          toast.querySelector("span").textContent = error
          document.querySelector('#toasts').appendChild(toast)
        });
			</script>
		</body>
	</html>
}

templ SignInModal() {
	<dialog x-data :open="$store.showSignInModal" class="modal">
		<div class="modal-box">
			<h3 class="text-lg font-bold">Sign In</h3>
			<p class="py-4">You must sign in to do that!</p>
			<div class="modal-action">
				<a class="btn btn-primary" href="/sign/in">Go</a>
				<button class="btn" @click="$store.showSignInModal = false">Close</button>
			</div>
		</div>
		<button @click="$store.showSignInModal = false" class="modal-backdrop"></button>
	</dialog>
}

func pluralize(value int, unit string) string {
	if value == 1 {
		return fmt.Sprintf("%d %s ago", value, unit)
	}
	return fmt.Sprintf("%d %ss ago", value, unit)
}

func formatDate(epoch int64) string {
	now := time.Now()
	t := time.Unix(epoch, 0)
	diff := now.Sub(t)

	const (
		minute = time.Minute
		hour   = time.Hour
		day    = 24 * hour
		week   = 7 * day
	)

	if diff < week {
		minutes := int(diff.Minutes())
		hours := int(diff.Hours())
		days := int(diff.Hours() / 24)

		switch {
		case minutes < 1:
			return "Just now"
		case minutes < 60:
			return pluralize(minutes, "minute")
		case hours < 24:
			return pluralize(hours, "hour")
		default:
			return pluralize(days, "day")
		}
	}

	// Fallback to absolute date
	return t.Format("02 Jan 2006")
}
