package frontend

import (
	"fmt"
	"github.com/dimmerz92/go-lucide-icons/pkg/templ/icons"
	"videoapp/internal/generated/proto"
)

templ ViewVideo(user *proto.User, video *proto.GetVideoResponse) {
	<link rel="stylesheet" href="https://cdn.vidstack.io/player/theme.css"/>
	<link rel="stylesheet" href="https://cdn.vidstack.io/player/video.css"/>
	<script src="https://cdn.vidstack.io/player" type="module"></script>
	@AppLayout(user) {
		{ video.Title }
		{ formatDate(video.CreatedAt) }
		@VideoStatusPoller(video)
	}
}

templ VideoError(user *proto.User, err string) {
	@AppLayout(user) {
		<div class="aspect-video w-full flex items-center justify-center gap-2 bg-base-300 rounded-xl border border-base-10p">
			@icons.TriangleAlert(icons.IconProps{Class: "size-8"})
			{ err }
		</div>
	}
}

templ VideoStatusPoller(video *proto.GetVideoResponse) {
	<div id="poller">
		if video.Stage == proto.Stage_FlaggedForNudity {
			<div class="aspect-video w-full flex items-center justify-center gap-2 bg-base-300 rounded-xl border border-base-10p">
				@icons.TriangleAlert(icons.IconProps{Class: "size-8"})
				This video was flagged for nudity
			</div>
		} else if video.Stage == proto.Stage_Processed {
			<media-player autoplay src={ fmt.Sprintf("http://localhost:4000/videos/%d/master.m3u8", video.UploadId) }>
				<media-provider></media-provider>
				<media-video-layout thumbnails={ fmt.Sprintf("http://localhost:9000/videos/%d/thumbnails.vtt", video.UploadId) }></media-video-layout>
			</media-player>
		} else {
			<div class="aspect-video w-full flex items-center justify-center gap-2 bg-base-300 rounded-xl border border-base-10p" hx-get={ fmt.Sprintf("/status/%d", video.Id) } hx-trigger="every 10s" hx-swap="outerHTML" hx-target="#poller">
				@icons.Cog(icons.IconProps{Class: "animate-spin size-8"})
				switch video.Stage {
					case proto.Stage_AwaitingProcessing:
						Your video is waiting to be processed
					case proto.Stage_Processing:
						We are processing your video
				}
			</div>
		}
		<script>
		// These parameters are used to authorize the CDN
		document.querySelector('media-player').addEventListener('provider-change', (event) => {
            const provider = event.detail;
            if (provider?.$$PROVIDER_TYPE === 'HLS') {
                provider.config = {
                    // Pass authorization headers to the CDN
                    xhrSetup(xhr, url) {
                        xhr.setRequestHeader("wt-payload", "{{ video.AuthorizationPayload }}")
                        xhr.setRequestHeader("wt-sig", "{{ video.AuthorizationSignature }}")
                    },
                };
            }
        });
		</script>
	</div>
}
